void solve(vector<int>&A,vector<vector<int>>&ans,vector<int>&row,int index)
{
 if(index==A.size()) 
 {
     return;
 }
 row.push_back(A[index]);
 ans.push_back(row);
 solve(A,ans,row,index+1);
 row.pop_back();
 while(index+1<A.size() && A[index]==A[index+1])index++;
  solve(A,ans,row,index+1);
  return;
 
}


vector<vector<int> > Solution::subsetsWithDup(vector<int> &A) {
    int n=A.size();
    sort(A.begin(),A.end());
    vector<vector<int>>ans;
    vector<int>row;
    ans.push_back(row);
    solve(A,ans,row,0);
    return ans;
}
